
1.  Is our multiplier fully-pipelined? Can it accept one input on each
    cycle and compute the outputs concurrently in separate cycles?
    Explain in a sentence or two.

    Ans: Yes it's fully pipelined. If there are two inputs, the former input won't influence the later one as it will always one stage before the following one, as its intermediate result stored in product_sum and state of the multiplication stored in shifted multipland and multiplier.

2.  For the 8-stage multiplier, what are the minimum clock period
    and total latency for a multiplication?

Clock period:  8.0 ns
Total latency: 64.0 ns

3.  For 4-stage?

Clock period:  11.5 ns
Total latency: 46.0 ns

4.  For 2-stage?

Clock period:  13.5 ns
Total latency: 27 ns

5.  Consider the relative values of theses answers. Do they seem reasonable?
    Why or why not?
    
    Ans: It's reasonable because when number of stages decreases, the clock cycle to complete each stage increases, which corresponds to increased complexity in each pipeline stage since the less the stages, the more work need to be done in each stages.
    However, we see a decreasing trend in overall latency when number of stages decreases. That depends on the trade-off between deeper pipeline and simpler stages and shorter pipeline and complex stages. It seems in this case, increasing the workload in each stage doesn't incur greater increase in critical path, therefore less stages is better design.



6.  What is minimum clock period for your ISR module (with the 8-stage mult)?

Clock period:  9.0 ns

7.  How long (in ns) would it take your module to compute the square root of
    1001 given the cycle time of question 6? Would you expect a performance
    gain or penalty if you used the 2-stage multiplier?
    
    Ans: It takes 2916 ns to finish the calculation. If we switch to 2-stage multiplier, I antipate a performance gain becasue:
    1) even though clock cycle becomes longer, the stage for calculation becomes one fourth and major cycles spent in ISR is the for loop which calculate 32 times the sqaure of intermediate value. So this major portion of latency becomes better which will bring performance gain.
    2) the latency of 2-stage is 2.5x better than 8-stage. I've also found the clock cycle for 2-stage mult inside ISR is 19ns and to complete the calculation it takes 2400 ns which is better performance.

